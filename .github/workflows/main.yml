name: Build X64

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  build-windows-x64:
    runs-on: windows-latest
    strategy:
      matrix:
        python_version: ['3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }} (x64)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        architecture: x64

    - name: Display Python info
      run: |
        python --version
        python -c "import platform; print('Architecture: ' + platform.machine())"
        python -c "import struct; print('Pointer size: ' + str(struct.calcsize('P') * 8) + ' bits')"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip config set global.timeout 120
        pip config set global.retries 3
        
        # 安装核心依赖
        pip install pyinstaller==6.15.0 flask==3.1.2 mutagen==1.47.0 requests==2.32.5 flask_cors==4.0.0
        
        # 安装 PySide6 (64位使用最新版本)
        echo "正在安装 PySide6 (x64)..."
        pip install "pyside6==6.6.1" --timeout=180
        
        # 验证安装
        python -c "import flask_cors; print('flask_cors version: ' + flask_cors.__version__)"
        python -c "import PySide6; print('PySide6 version: ' + PySide6.__version__)"

    - name: Create icon file if missing
      run: |
        if (-not (Test-Path "icon.ico")) {
          echo "图标文件不存在，创建占位图标..."
          echo "placeholder" > icon.ico
        }

    - name: Build x64 executable
      run: |
        $buildName = "MusicMetadataProcessor_x64"
        
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name $buildName `
          --icon=icon.ico `
          --add-data "icon.ico;." `
          --hidden-import=flask `
          --hidden-import=flask_cors `
          --hidden-import=flask_cors.core `
          --hidden-import=mutagen `
          --hidden-import=requests `
          --hidden-import=PySide6 `
          --hidden-import=PySide6.QtWidgets `
          --hidden-import=PySide6.QtCore `
          --hidden-import=PySide6.QtGui `
          --hidden-import=PySide6.QtNetwork `
          --hidden-import=werkzeug.serving `
          --hidden-import=werkzeug.middleware.dispatcher `
          --hidden-import=chardet `
          --hidden-import=charset_normalizer `
          --hidden-import=idna `
          --hidden-import=urllib3 `
          --hidden-import=certifi `
          --hidden-import=ssl `
          --clean `
          --noconfirm `
          app_gui.py

        if (Test-Path "dist/$buildName.exe") {
          echo "✅ x64 构建成功！"
          Move-Item "dist/$buildName.exe" "dist/MusicMetadataProcessor_windows_x64.exe"
        } else {
          echo "❌ x64 构建失败"
          exit 1
        }

    - name: Upload x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-x64-build
        path: dist/
        if-no-files-found: error

  build-windows-x86:
    runs-on: windows-latest
    strategy:
      matrix:
        python_version: ['3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }} (x86)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        architecture: x86

    - name: Display Python info
      run: |
        python --version
        python -c "import platform; print('Architecture: ' + platform.machine())"
        python -c "import struct; print('Pointer size: ' + str(struct.calcsize('P') * 8) + ' bits')"

    - name: Install dependencies for x86
      run: |
        python -m pip install --upgrade pip
        pip config set global.timeout 120
        pip config set global.retries 3
        
        # 安装核心依赖
        pip install pyinstaller==6.15.0 flask==3.1.2 mutagen==1.47.0 requests==2.32.5 flask_cors==4.0.0
        
        # 尝试安装 PySide6 的兼容版本
        echo "正在尝试安装 PySide6 兼容版本..."
        $pysideInstalled = $false
        
        # 尝试多个可能的兼容版本
        $versions = @("6.5.3", "6.5.2", "6.5.1", "6.5.0", "6.4.3", "6.4.2")
        
        foreach ($version in $versions) {
            echo "尝试安装 PySide6 $version"
            pip install "pyside6==$version" --timeout=120
            if ($LASTEXITCODE -eq 0) {
                $pysideInstalled = $true
                echo "✅ PySide6 $version 安装成功"
                break
            } else {
                echo "❌ PySide6 $version 安装失败"
            }
        }
        
        # 如果所有 PySide6 版本都失败，尝试安装 PyQt5
        if (-not $pysideInstalled) {
            echo "所有 PySide6 版本安装失败，尝试安装 PyQt5..."
            pip install pyqt5==5.15.9
            if ($LASTEXITCODE -eq 0) {
                echo "✅ PyQt5 安装成功"
            } else {
                echo "❌ PyQt5 安装也失败"
                exit 1
            }
        }
        
        # 验证安装
        python -c "import flask_cors; print('flask_cors version: ' + flask_cors.__version__)"
        
        python -c "
try:
    import PySide6
    print('PySide6 version: ' + PySide6.__version__)
except ImportError:
    try:
        import PyQt5
        print('PyQt5 version: ' + PyQt5.QtCore.QT_VERSION_STR)
        print('使用 PyQt5 作为 GUI 后端')
    except ImportError:
        print('ERROR: 没有找到可用的 GUI 库')
        exit(1)
        "

    - name: Create icon file if missing
      run: |
        if (-not (Test-Path "icon.ico")) {
          echo "图标文件不存在，创建占位图标..."
          echo "placeholder" > icon.ico
        }

    - name: Build x86 executable
      run: |
        $buildName = "MusicMetadataProcessor_x86"
        
        # 检查使用哪个 GUI 库
        $guiLib = "PySide6"
        python -c "
try:
    import PySide6
    print('PYSIDE6_MODE')
except ImportError:
    try:
        import PyQt5
        print('PYQT5_MODE')
    except ImportError:
        print('NO_GUI_LIB')
        exit(1)
        " > gui_check.txt
        
        $guiCheck = Get-Content gui_check.txt
        if ($guiCheck -eq "PYQT5_MODE") {
            $guiLib = "PyQt5"
            echo "使用 PyQt5 构建 32 位版本"
        } else {
            echo "使用 PySide6 构建 32 位版本"
        }
        
        # 构建命令
        if ($guiLib -eq "PySide6") {
            python -m PyInstaller `
              --onefile `
              --windowed `
              --name $buildName `
              --icon=icon.ico `
              --add-data "icon.ico;." `
              --hidden-import=flask `
              --hidden-import=flask_cors `
              --hidden-import=flask_cors.core `
              --hidden-import=mutagen `
              --hidden-import=requests `
              --hidden-import=PySide6 `
              --hidden-import=PySide6.QtWidgets `
              --hidden-import=PySide6.QtCore `
              --hidden-import=PySide6.QtGui `
              --hidden-import=PySide6.QtNetwork `
              --hidden-import=werkzeug.serving `
              --hidden-import=werkzeug.middleware.dispatcher `
              --hidden-import=chardet `
              --hidden-import=charset_normalizer `
              --hidden-import=idna `
              --hidden-import=urllib3 `
              --hidden-import=certifi `
              --hidden-import=ssl `
              --clean `
              --noconfirm `
              app_gui.py
        } else {
            # 使用 PyQt5 的构建命令
            python -m PyInstaller `
              --onefile `
              --windowed `
              --name $buildName `
              --icon=icon.ico `
              --add-data "icon.ico;." `
              --hidden-import=flask `
              --hidden-import=flask_cors `
              --hidden-import=flask_cors.core `
              --hidden-import=mutagen `
              --hidden-import=requests `
              --hidden-import=PyQt5 `
              --hidden-import=PyQt5.QtWidgets `
              --hidden-import=PyQt5.QtCore `
              --hidden-import=PyQt5.QtGui `
              --hidden-import=PyQt5.QtNetwork `
              --hidden-import=werkzeug.serving `
              --hidden-import=werkzeug.middleware.dispatcher `
              --hidden-import=chardet `
              --hidden-import=charset_normalizer `
              --hidden-import=idna `
              --hidden-import=urllib3 `
              --hidden-import=certifi `
              --hidden-import=ssl `
              --clean `
              --noconfirm `
              app_gui.py
        }

        if (Test-Path "dist/$buildName.exe") {
          echo "✅ x86 构建成功！"
          Move-Item "dist/$buildName.exe" "dist/MusicMetadataProcessor_windows_x86.exe"
        } else {
          echo "❌ x86 构建失败"
          exit 1
        }

    - name: Upload x86 artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-x86-build
        path: dist/
        if-no-files-found: error

  create-release:
    needs: [build-windows-x64, build-windows-x86]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: |
        echo "找到的可执行文件:"
        find artifacts -name "*.exe" -exec echo "  - {}" \;

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*.exe
        body: |
          # 音乐元数据处理器

          ## 版本信息
          - 构建时间: ${{ github.event.repository.updated_at }}
          - Python版本: 3.10
          - 包含架构: 32位 (x86) 和 64位 (x64)

          ## 使用说明
          1. 根据您的系统架构下载对应的可执行文件
          2. 双击运行即可

          ## 系统要求
          - Windows 7 或更高版本
          - .NET Framework 4.5 或更高版本

          ## 架构选择指南
          - **64位系统**: 请下载文件名包含 `x64` 的文件
          - **32位系统**: 请下载文件名包含 `x86` 的文件

          ## 如何确定系统架构
          - 按 Win + R 键，输入 "winver" 查看系统信息
          - 或在设置 > 系统 > 关于中查看系统类型

          ## 注意事项
          - 首次运行可能会被Windows Defender拦截，请选择"更多信息"->"仍要运行"
          - 确保系统中已安装必要的Visual C++运行时库
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
