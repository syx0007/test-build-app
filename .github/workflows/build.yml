name: Build Windows Executables

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  build-windows:
    strategy:
      matrix:
        include:
          - architecture: x64
            target: x86_64
            python_version: '3.10'
            artifact_name: windows-x64
          - architecture: x86
            target: x86
            python_version: '3.10'
            artifact_name: windows-x86

    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }} (${{ matrix.architecture }})
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        architecture: ${{ matrix.architecture }}

    - name: Display Python info
      run: |
        python --version
        python -c "import platform; print('Architecture: ' + platform.machine())"
        python -c "import struct; print('Pointer size: ' + str(struct.calcsize('P') * 8) + ' bits')"
        python -c "import sys; print('Python executable: ' + sys.executable)"

    - name: Install dependencies
      run: |
        # 设置 pip 重试和超时
        python -m pip install --upgrade pip
        pip config set global.timeout 300
        pip config set global.retries 5
        
        # 安装核心依赖
        echo "正在安装核心依赖..."
        pip install pyinstaller==6.15.0 flask==3.1.2 mutagen==1.47.0 requests==2.32.5 flask_cors==4.0.0
        
        # 安装 PySide6 - 使用更稳定的方式
        echo "正在安装 PySide6..."
        pip install "pyside6==6.6.1" --timeout=600 --retries=5
        
        # 详细验证 PySide6 安装
        echo "=== 验证 PySide6 安装 ==="
        python -c "
import sys
print(f'Python executable: {sys.executable}')
print(f'System architecture: {platform.machine()}')
print(f'Python architecture: {\"64-bit\" if sys.maxsize > 2**32 else \"32-bit\"}')

try:
    import PySide6
    print(f'✅ PySide6 version: {PySide6.__version__}')
    print(f'PySide6 path: {PySide6.__file__}')
    
    # 测试基本功能
    from PySide6.QtCore import QSize
    from PySide6.QtWidgets import QApplication
    print('✅ PySide6 基本功能测试通过')
    
except ImportError as e:
    print(f'❌ PySide6 导入失败: {e}')
    print('已安装的包:')
    import pkg_resources
    for pkg in pkg_resources.working_set:
        if 'pyside' in pkg.key.lower() or 'qt' in pkg.key.lower():
            print(f'  {pkg.key}=={pkg.version}')
    exit(1)
"

    - name: Create icon file if missing
      run: |
        if (-not (Test-Path "icon.ico")) {
          echo "图标文件不存在，创建占位图标..."
          New-Item -ItemType File -Name "icon.ico" -Force
        }

    - name: Build executable for ${{ matrix.target }}
      run: |
        # 设置构建参数
        $buildName = "MusicMetadataProcessor_${{ matrix.target }}"
        $outputName = "MusicMetadataProcessor_windows_${{ matrix.target }}.exe"
        
        Write-Output "开始构建 ${{ matrix.target }} 架构的可执行文件..."
        
        # 再次验证 PySide6 可用性
        python -c "import PySide6; print('PySide6 可用性确认成功')"
        
        # 构建命令
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name $buildName `
          --icon=icon.ico `
          --add-data "icon.ico;." `
          --hidden-import=flask `
          --hidden-import=flask_cors `
          --hidden-import=flask_cors.core `
          --hidden-import=mutagen `
          --hidden-import=requests `
          --hidden-import=PySide6 `
          --hidden-import=PySide6.QtWidgets `
          --hidden-import=PySide6.QtCore `
          --hidden-import=PySide6.QtGui `
          --hidden-import=PySide6.QtNetwork `
          --hidden-import=werkzeug.serving `
          --hidden-import=werkzeug.middleware.dispatcher `
          --hidden-import=chardet `
          --hidden-import=charset_normalizer `
          --hidden-import=idna `
          --hidden-import=urllib3 `
          --hidden-import=certifi `
          --hidden-import=ssl `
          --hidden-import=json `
          --hidden-import=os `
          --hidden-import=sys `
          --hidden-import=threading `
          --hidden-import=time `
          --hidden-import=re `
          --hidden-import=base64 `
          --hidden-import=hashlib `
          --clean `
          --noconfirm `
          app_gui.py
        
        if (Test-Path "dist/$buildName.exe") {
          echo "✅ ${{ matrix.target }} 架构构建成功！"
          Move-Item "dist/$buildName.exe" "dist/$outputName"
          Get-Item "dist/$outputName" | Format-List Name, Length, LastWriteTime
        } else {
          echo "❌ ${{ matrix.target }} 架构构建失败"
          exit 1
        }

    - name: Upload ${{ matrix.artifact_name }} artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/
        if-no-files-found: error

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: windows-*
        merge-multiple: true

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*.exe
        body: |
          # 音乐元数据处理器
          
          ## 版本信息
          - 构建时间: ${{ github.event.repository.updated_at }}
          - Python版本: 3.10
          - 包含架构: x86 (32位) 和 x64 (64位)
          
          ## 文件说明
          - `MusicMetadataProcessor_windows_x86.exe`: 32位版本
          - `MusicMetadataProcessor_windows_x86_64.exe`: 64位版本
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
