name: Build Windows Executables (x64 + x86)

on:
  push:
    tags: ['v*']
  workflow_dispatch:

# 设置超时时间，防止 x86 构建被取消
timeout-minutes: 30

jobs:
  build-windows:
    strategy:
      matrix:
        include:
          - architecture: x64
            python_version: '3.10'
            artifact_suffix: 'windows-x64'
          - architecture: x86
            python_version: '3.10'
            artifact_suffix: 'windows-x86'

    runs-on: windows-latest
    name: Build Windows ${{ matrix.architecture }}

    # 为 x86 架构设置更长的超时时间
    timeout-minutes: ${{ matrix.architecture == 'x86' && 45 || 25 }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }} (${{ matrix.architecture }})
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        architecture: ${{ matrix.architecture }}

    - name: Display Python info
      run: |
        python --version
        python -c "import platform; print(f'Architecture: {platform.machine()}')"
        python -c "import struct; print(f'Pointer size: {struct.calcsize(""P"") * 8}-bit')"

    - name: Install dependencies with retry
      run: |
        # 设置 pip 重试和超时
        python -m pip install --upgrade pip
        pip config set global.timeout 300  # 增加超时时间
        pip config set global.retries 5    # 增加重试次数
        
        echo "安装基本依赖..."
        pip install pyinstaller==6.15.0 flask==3.1.2 mutagen==1.47.0 requests==2.32.5 flask_cors==4.0.0
        
        echo "正在安装 PySide6 for ${{ matrix.architecture }}..."
        # 使用清华镜像源加速下载
        pip install "pyside6==6.6.1" -i https://pypi.tuna.tsinghua.edu.cn/simple --timeout=300
        
        # 验证安装
        python -c "import flask_cors; print('flask_cors 安装成功')"
        python -c "import PySide6; print(f'PySide6 版本: {PySide6.__version__}')"

    - name: Create icon file if missing
      run: |
        if (-not (Test-Path "icon.ico")) {
          echo "图标文件不存在，跳过图标参数"
          # 不创建占位文件，直接在构建时跳过图标
        }

    - name: Build executable
      run: |
        # 检查图标文件是否存在
        $iconOption = ""
        if (Test-Path "icon.ico") {
          $iconOption = "--icon=icon.ico --add-data `"icon.ico;.`""
          echo "使用图标文件"
        } else {
          echo "未找到图标文件，跳过图标"
        }
        
        # 构建命令
        $buildCmd = @"
python -m PyInstaller `
  --onefile `
  --windowed `
  --name MusicMetadataProcessor `
  $iconOption `
  --hidden-import=flask `
  --hidden-import=flask_cors `
  --hidden-import=flask_cors.core `
  --hidden-import=mutagen `
  --hidden-import=requests `
  --hidden-import=PySide6 `
  --hidden-import=PySide6.QtWidgets `
  --hidden-import=PySide6.QtCore `
  --hidden-import=PySide6.QtGui `
  --hidden-import=PySide6.QtNetwork `
  --hidden-import=werkzeug.serving `
  --hidden-import=chardet `
  --hidden-import=charset_normalizer `
  --hidden-import=idna `
  --hidden-import=urllib3 `
  --hidden-import=certifi `
  --clean `
  --noconfirm `
  app_gui.py
"@
        
        echo "执行构建命令..."
        Invoke-Expression $buildCmd
        
        # 检查构建是否成功并重命名
        if (Test-Path "dist/MusicMetadataProcessor.exe") {
          echo "✅ 构建成功！"
          $newName = "MusicMetadataProcessor_${{ matrix.artifact_suffix }}.exe"
          Move-Item "dist/MusicMetadataProcessor.exe" "dist/$newName"
          echo "重命名为: $newName"
          
          # 显示文件信息
          $file = Get-Item "dist/$newName"
          $sizeMB = [math]::Round($file.Length / 1MB, 2)
          echo "文件大小: ${sizeMB} MB"
        } else {
          echo "❌ 构建失败，输出文件不存在"
          echo "当前目录文件列表:"
          Get-ChildItem
          echo "dist 目录文件列表:"
          if (Test-Path "dist") { Get-ChildItem "dist" }
          exit 1
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_suffix }}
        path: dist/MusicMetadataProcessor_${{ matrix.artifact_suffix }}.exe
        if-no-files-found: error

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: |
        echo "下载的构建文件:"
        find ./artifacts -name "*.exe" -type f -exec ls -la {} \;

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*.exe
        body: |
          自动构建的音乐元数据处理器
          - 构建时间: ${{ date }}
          - Python 版本: 3.10
          - 包含 64位 和 32位 版本
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
